name: Build Electron App

on:
  push:
    tags:
      - 'v*'
    branches:
      - main  # ou master, dependendo da sua branch principal
  pull_request:
    branches:
      - main  # ou master

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4 # Atualizado para v4

      - name: Set up Node.js
        uses: actions/setup-node@v4 # Atualizado para v4
        with:
          node-version: 22.16 # Recomendado usar uma versão LTS
          cache: 'npm'


      - name: Install dependencies
        run: npm ci
        
      # Instalar dependências específicas para Linux
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libxkbfile-dev libsecret-1-dev libxss-dev libgconf-2-4 libgtk-3-0 libnss3 libasound2 icnsutils graphicsmagick xz-utils

      # Build da aplicação
      - name: Build Electron app
        env:
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          MINIO_ENDPOINT: ${{ secrets.MINIO_ENDPOINT }}
          MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
          MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
          MINIO_BUCKET_NAME: ${{ secrets.MINIO_BUCKET_NAME }}
          MINIO_USE_SSL: ${{ secrets.MINIO_USE_SSL }}

        run: npm run build
        
      # Preparar artefatos para upload
      - name: Prepare artifacts
        run: |
          mkdir artifacts
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp dist/*.exe artifacts/ 2>/dev/null || :
            cp dist/*.msi artifacts/ 2>/dev/null || :
            cp dist/*.appx artifacts/ 2>/dev/null || :
            cp dist/latest.yml artifacts/ 2>/dev/null || : # Arquivo de auto-update
            cp dist/*-arm64.exe artifacts/ 2>/dev/null || : # Se construir para ARM64 no Windows
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            cp dist/*.dmg artifacts/ 2>/dev/null || :
            cp dist/*.pkg artifacts/ 2>/dev/null || :
            cp dist/*.zip artifacts/ 2>/dev/null || : # Ex: mac-zip
            cp dist/latest-mac.yml artifacts/ 2>/dev/null || : # Arquivo de auto-update
            cp dist/*-arm64.dmg artifacts/ 2>/dev/null || : # Para Macs M1/M2
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            cp dist/*.AppImage artifacts/ 2>/dev/null || :
            cp dist/*.deb artifacts/ 2>/dev/null || :
            cp dist/*.rpm artifacts/ 2>/dev/null || :
            cp dist/*.snap artifacts/ 2>/dev/null || :
            cp dist/latest-linux.yml artifacts/ 2>/dev/null || : # Arquivo de auto-update
            cp dist/*-arm64.AppImage artifacts/ 2>/dev/null || : # Se construir para ARM64 Linux
          fi
        shell: bash

      # Upload de artefatos para GitHub Actions
      - name: Upload artifacts
        uses: actions/upload-artifact@v4 # Atualizado para v4
        with:
          name: ${{ matrix.os }}-build-artifacts # Nome do artefato (ex: windows-latest-build-artifacts)
          path: artifacts/ # Faz upload do conteúdo da pasta artifacts

  # Job para criar release no GitHub
  release:
    name: Create Release
    needs: build # Depende da conclusão bem-sucedida de todos os jobs 'build'
    if: startsWith(github.ref, 'refs/tags/') # Só executa quando uma tag é enviada
    runs-on: ubuntu-latest
    
    permissions: # Permissões necessárias para o token GITHUB_TOKEN
      contents: write # Para criar releases e fazer upload de assets

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        # Sem 'name' especificado, baixa todos os artefatos do workflow run
        # Cada artefato será baixado em uma pasta com seu nome (ex: windows-latest-build-artifacts/)
        with:
          path: all-artifacts # Diretório onde todos os artefatos serão baixados

      - name: Display structure of downloaded files
        run: ls -R all-artifacts # Para depuração, mostra a estrutura dos arquivos baixados

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2 # Atualizado para v2 (ou a mais recente)
        with:
          # O nome do release será a tag (ex: v1.0.0)
          # O corpo do release pode ser preenchido automaticamente com o changelog se você usar ferramentas como conventional-changelog
          # ou pode ser uma mensagem padrão como abaixo.
          draft: true # Cria o release como rascunho. Mude para false para publicar diretamente.
          prerelease: false # Marque como true se for um pré-release
          files: |
            all-artifacts/**/*.exe
            all-artifacts/**/*.msi
            all-artifacts/**/*.appx
            all-artifacts/**/*.dmg
            all-artifacts/**/*.pkg
            all-artifacts/**/*.zip
            all-artifacts/**/*.AppImage
            all-artifacts/**/*.deb
            all-artifacts/**/*.rpm
            all-artifacts/**/*.snap
            all-artifacts/**/*.yml # Arquivos de auto-update (latest.yml, latest-mac.yml, etc.)
          # name: Release ${{ github.ref_name }} # Opcional, o padrão é o nome da tag
          body: |
            # Release ${{ github.ref_name }}
            
            Instaladores e arquivos desta versão.
            
            Consulte o [CHANGELOG.md](CHANGELOG.md) para detalhes das mudanças (se você tiver um).
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Token fornecido pelo GitHub Actions